/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TransactionsService } from "../transactions.service";
import { TransactionsCreateInput } from "./TransactionsCreateInput";
import { Transactions } from "./Transactions";
import { TransactionsFindManyArgs } from "./TransactionsFindManyArgs";
import { TransactionsWhereUniqueInput } from "./TransactionsWhereUniqueInput";
import { TransactionsUpdateInput } from "./TransactionsUpdateInput";

export class TransactionsControllerBase {
  constructor(protected readonly service: TransactionsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Transactions })
  async createTransactions(
    @common.Body() data: TransactionsCreateInput
  ): Promise<Transactions> {
    return await this.service.createTransactions({
      data: {
        ...data,

        itemsCatalog: data.itemsCatalog
          ? {
              connect: data.itemsCatalog,
            }
          : undefined,

        warehouse: data.warehouse
          ? {
              connect: data.warehouse,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        dateTime: true,
        id: true,

        itemsCatalog: {
          select: {
            id: true,
          },
        },

        quantity: true,
        typeField: true,
        updatedAt: true,

        warehouse: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Transactions] })
  @ApiNestedQuery(TransactionsFindManyArgs)
  async transactionsItems(
    @common.Req() request: Request
  ): Promise<Transactions[]> {
    const args = plainToClass(TransactionsFindManyArgs, request.query);
    return this.service.transactionsItems({
      ...args,
      select: {
        createdAt: true,
        dateTime: true,
        id: true,

        itemsCatalog: {
          select: {
            id: true,
          },
        },

        quantity: true,
        typeField: true,
        updatedAt: true,

        warehouse: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Transactions })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async transactions(
    @common.Param() params: TransactionsWhereUniqueInput
  ): Promise<Transactions | null> {
    const result = await this.service.transactions({
      where: params,
      select: {
        createdAt: true,
        dateTime: true,
        id: true,

        itemsCatalog: {
          select: {
            id: true,
          },
        },

        quantity: true,
        typeField: true,
        updatedAt: true,

        warehouse: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Transactions })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTransactions(
    @common.Param() params: TransactionsWhereUniqueInput,
    @common.Body() data: TransactionsUpdateInput
  ): Promise<Transactions | null> {
    try {
      return await this.service.updateTransactions({
        where: params,
        data: {
          ...data,

          itemsCatalog: data.itemsCatalog
            ? {
                connect: data.itemsCatalog,
              }
            : undefined,

          warehouse: data.warehouse
            ? {
                connect: data.warehouse,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          dateTime: true,
          id: true,

          itemsCatalog: {
            select: {
              id: true,
            },
          },

          quantity: true,
          typeField: true,
          updatedAt: true,

          warehouse: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Transactions })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTransactions(
    @common.Param() params: TransactionsWhereUniqueInput
  ): Promise<Transactions | null> {
    try {
      return await this.service.deleteTransactions({
        where: params,
        select: {
          createdAt: true,
          dateTime: true,
          id: true,

          itemsCatalog: {
            select: {
              id: true,
            },
          },

          quantity: true,
          typeField: true,
          updatedAt: true,

          warehouse: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
