/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Transactions as PrismaTransactions,
  ItemsCatalog as PrismaItemsCatalog,
  Warehouse as PrismaWarehouse,
} from "@prisma/client";

export class TransactionsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TransactionsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.transactions.count(args);
  }

  async transactionsItems(
    args: Prisma.TransactionsFindManyArgs
  ): Promise<PrismaTransactions[]> {
    return this.prisma.transactions.findMany(args);
  }
  async transactions(
    args: Prisma.TransactionsFindUniqueArgs
  ): Promise<PrismaTransactions | null> {
    return this.prisma.transactions.findUnique(args);
  }
  async createTransactions(
    args: Prisma.TransactionsCreateArgs
  ): Promise<PrismaTransactions> {
    return this.prisma.transactions.create(args);
  }
  async updateTransactions(
    args: Prisma.TransactionsUpdateArgs
  ): Promise<PrismaTransactions> {
    return this.prisma.transactions.update(args);
  }
  async deleteTransactions(
    args: Prisma.TransactionsDeleteArgs
  ): Promise<PrismaTransactions> {
    return this.prisma.transactions.delete(args);
  }

  async getItemsCatalog(parentId: string): Promise<PrismaItemsCatalog | null> {
    return this.prisma.transactions
      .findUnique({
        where: { id: parentId },
      })
      .itemsCatalog();
  }

  async getWarehouse(parentId: string): Promise<PrismaWarehouse | null> {
    return this.prisma.transactions
      .findUnique({
        where: { id: parentId },
      })
      .warehouse();
  }
}
