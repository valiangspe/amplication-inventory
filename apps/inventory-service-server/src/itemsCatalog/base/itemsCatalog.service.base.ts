/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ItemsCatalog as PrismaItemsCatalog,
  Transactions as PrismaTransactions,
} from "@prisma/client";

export class ItemsCatalogServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ItemsCatalogCountArgs, "select">
  ): Promise<number> {
    return this.prisma.itemsCatalog.count(args);
  }

  async itemsCatalogs(
    args: Prisma.ItemsCatalogFindManyArgs
  ): Promise<PrismaItemsCatalog[]> {
    return this.prisma.itemsCatalog.findMany(args);
  }
  async itemsCatalog(
    args: Prisma.ItemsCatalogFindUniqueArgs
  ): Promise<PrismaItemsCatalog | null> {
    return this.prisma.itemsCatalog.findUnique(args);
  }
  async createItemsCatalog(
    args: Prisma.ItemsCatalogCreateArgs
  ): Promise<PrismaItemsCatalog> {
    return this.prisma.itemsCatalog.create(args);
  }
  async updateItemsCatalog(
    args: Prisma.ItemsCatalogUpdateArgs
  ): Promise<PrismaItemsCatalog> {
    return this.prisma.itemsCatalog.update(args);
  }
  async deleteItemsCatalog(
    args: Prisma.ItemsCatalogDeleteArgs
  ): Promise<PrismaItemsCatalog> {
    return this.prisma.itemsCatalog.delete(args);
  }

  async findTransactionsItems(
    parentId: string,
    args: Prisma.TransactionsFindManyArgs
  ): Promise<PrismaTransactions[]> {
    return this.prisma.itemsCatalog
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .transactionsItems(args);
  }
}
